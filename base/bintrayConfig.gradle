apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// 定义参数
def gitUrl = 'https://github.com/gh7800/JBase.git'   // Git仓库的url
def siteUrl = 'https://github.com/gh7800/JBase'      //项目主页

def groupIdDefined = "com.shineiot"
def artifactIdDefined = "baseKt"
def versionDefined = "1.0.8"                         //implementation com.shineiot.Base:1.0.7

// 待发布项目的groupId和version。android-maven-gradle-plugin插件需要这么配置。
group = "$groupIdDefined"
version = "$versionDefined"

// bintray平台信息配置
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")  // local.properties里设置
    key = properties.getProperty("bintray.apikey") // local.properties里设置
    configurations = ['archives']
    publish = true
    pkg {
        repo = "Base"  // 必填。bintray平台仓库名，必须已经创建过。
        name = "$artifactIdDefined"  // 必填。仓库里包package的名称，没有的话会自动创建。
        licenses = ["Apache-2.0"] // 首次创建package则必须，否则选填。
        vcsUrl = gitUrl // 首次创建package则必须，否则选填。
        version {
            name = "$versionDefined"
        }
    }
}

// pom文件信息配置
install {
    repositories.mavenInstaller {
        pom.project {
            groupId "$groupIdDefined"
            artifactId "$artifactIdDefined"
            version "$versionDefined"
            packaging 'aar'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            //填写开发者基本信息，复制我的，这里需要修改。
            developers {
                developer {
                    id 'ws' // 开发者的id,随便写
                    name 'wangShuai' // 开发者名字,,随便写
                    email 'glwangshuai@gmail.com' // 开发者邮箱。
                }
            }

            // SCM，直接复制，这里不需要修改。
            scm {
                connection gitUrl // Git仓库地址。
                developerConnection gitUrl // Git仓库地址。
                url siteUrl // 项目主页。
            }
        }
    }
}

// 生成sourceJar和javaDocJar
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// 执行 gradlew clean bintrayUpload